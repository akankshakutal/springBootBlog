[
  {
    "title": " Spring Boot",
    "date": "2019-09-04",

    "content": [
      {
        "topic": "AOP(Apsect Oriented Programming) :",
        "text": "In AOP, aspects enable the modularization of concerns such as transaction management, logging or security that cut across multiple types and objects (often termedÂ crosscutting concerns). AOP provides the way to dynamically add the cross-cutting concern before, after or around the actual logic using simple pluggable configurations.\nUsing AOP, we define the common functionality in one place, but we can declaratively define how and where this functionality is applied without having to modify the class to which we are applying the new feature. Cross-cutting concerns can now be modularized into special classes called aspects.",
        "subtopics": []
      },
      {
        "topic": "Basic concepts",
        "subtopics": [
          {
            "topic": "Join point :",
            "text": "A point during the execution of a program, such as the execution of a method or the handling of an exception.You can also say, it is the actual place in the application where an action will be taken using Spring AOP framework."
          },
          {
            "topic": "Advice :",
            "text": "Action taken by an aspect at a particular join point. This is the actual piece of code that is invoked during program execution by Spring AOP framework."
          },
          {
            "topic": "Pointcut :",
            "text": "A predicate that matches join points.Spring AOP only supports method execution join points for Spring beans.This is a set of one or more joinpoints where an advice should be executed"
          },
          {
            "topic": "Introduction :",
            "text": "An introduction allows you to add new methods or attributes to existing classes."
          },
          {
            "topic": "Target object :",
            "text": "The object being advised by one or more aspects. This object will always be a proxied object. Also referred to as the advised object."
          }
        ]
      },
      {
        "topic": "Types of Advice",
        "subtopics": [
          {
            "topic": "before",
            "text": "Run advice before the method execution."
          },
          {
            "topic": "after",
            "text": "Run advice after the method execution, regardless of its outcome."
          },
          {
            "topic": "after-returning",
            "text": "Run advice after the method execution, only if the method completes successfully."
          },
          {
            "topic": "after-throwing",
            "text": "Run advice after the method execution, only if the method exits by throwing an exception."
          },
          {
            "topic": "around",
            "text": "Run advice before and after the advised method is invoked."
          }
        ]
      },
      {
        "topic": "Pointcut Designators :",
        "text": "Spring AOP supports the following AspectJ pointcut designators (PCD) for use in pointcut expressions:",
        "subtopics": [
          {
            "topic": "execution :",
            "text": "For matching method execution join points. This is the primary pointcut designator to use when working with Spring AOP.",
            "codeSnippet": "@Before(value = \"execution(* com.Controller.*.*(..))\")\n public void beforeAdvice(JoinPoint joinPoint) {\n    System.out.println(\"Before method:\" + joinPoint.getSignature());\n}"
          },
          {
            "topic": "within :",
            "text": " Limits matching to join points within certain types (the execution of a method declared within a matching type when using Spring AOP).",
            "codeSnippet": "@Before(value = \"within(com.service.*)\")\n public void beforeAdvice(JoinPoint joinPoint) {\n    System.out.println(\"Before method:\" + joinPoint.getSignature());\n}"
          },
          {
            "topic": "this :",
            "text": "Limits matching to join points (the execution of methods when using Spring AOP) where the bean reference (Spring AOP proxy) is an instance of the given type.",
            "codeSnippet": "@Before(value = \"this(com.service.EmployeeService)\")\n public void beforeAdvice(JoinPoint joinPoint) {\n    System.out.println(\"Before method:\" + joinPoint.getSignature());\n}"
          },
          {
            "topic": "target :",
            "text": "Limits matching to join points (the execution of methods when using Spring AOP) where the target object (application object being proxied) is an instance of the given type.",
            "codeSnippet": "@Before(value = \"target(com.service.EmployeeService)\")\n public void beforeAdvice(JoinPoint joinPoint) {\n    System.out.println(\"Before method:\" + joinPoint.getSignature());\n}"
          },
          {
            "topic": "@within :",
            "text": "any join point (method execution only in Spring AOP) where the declared type of the target object has given annotation:",
            "codeSnippet": "@Before(value = \"@within(java.beans.Transient)\")\n public void beforeAdvice(JoinPoint joinPoint) {\n    System.out.println(\"Before method:\" + joinPoint.getSignature());\n}"
          },
          {
            "topic": "@annotation :",
            "text": "any join point (method execution only in Spring AOP) where the executing method has given annotation:",
            "codeSnippet": "@Before(value = \"@annotation(com.Loggable)\")\n// Note that com.Loggable is what we defined\n public void beforeAdvice(JoinPoint joinPoint) {\n    System.out.println(\"Before method:\" + joinPoint.getSignature());\n}"
          },
          {
            "topic": "args :",
            "text": "Limits matching to join points (the execution of methods when using Spring AOP) where the arguments are instances of the given types.",
            "codeSnippet": "@Before(value = \"execution(* com.service.EmployeeService.*(..)) and args(name,empId)\")\n public void beforeAdvice(JoinPoint joinPoint, String name, String empId) {\n    System.out.println(\"Before method:\" + joinPoint.getSignature());\n}"
          }
        ]
      }
    ]
  }
]
